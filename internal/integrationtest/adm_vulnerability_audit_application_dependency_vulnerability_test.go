// Copyright (c) 2017, 2023, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"github.com/oracle/terraform-provider-oci/httpreplay"
	"github.com/oracle/terraform-provider-oci/internal/acctest"

	"github.com/oracle/terraform-provider-oci/internal/utils"
)

var (
	AdmvulnerabilityAuditApplicationDependencyVulnerabilitySingularDataSourceRepresentation = map[string]interface{}{
		"vulnerability_audit_id":       acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
		"gav":                          acctest.Representation{RepType: acctest.Required, Create: `com.google.guava:guava:29.0-jre`},
		"cvss_v2greater_than_or_equal": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
		"cvss_v3greater_than_or_equal": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
		"sort_by":                      acctest.Representation{RepType: acctest.Required, Create: `gav`},
	}

	AdmvulnerabilityAuditApplicationDependencyVulnerabilitySingularDataSourceWithDepthRepresentation = map[string]interface{}{
		"vulnerability_audit_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
		"depth":                  acctest.Representation{RepType: acctest.Required, Create: `0`},
		"root_node_id":           acctest.Representation{RepType: acctest.Required, Create: `nodeId1`},
		"sort_by":                acctest.Representation{RepType: acctest.Required, Create: `dfs`},
	}

	AdmvulnerabilityAuditApplicationDependencyVulnerabilityDataSourceRepresentation = map[string]interface{}{
		"vulnerability_audit_id":       acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
		"gav":                          acctest.Representation{RepType: acctest.Required, Create: `com.google.guava:guava:29.0-jre`},
		"cvss_v2greater_than_or_equal": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
		"cvss_v3greater_than_or_equal": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
		"sort_by":                      acctest.Representation{RepType: acctest.Required, Create: `gav`},
	}

	AdmvulnerabilityAuditApplicationDependencyVulnerabilityDataSourceWithDepthRepresentation = map[string]interface{}{
		"vulnerability_audit_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
		"depth":                  acctest.Representation{RepType: acctest.Required, Create: `0`},
		"root_node_id":           acctest.Representation{RepType: acctest.Required, Create: `nodeId1`},
		"sort_by":                acctest.Representation{RepType: acctest.Required, Create: `dfs`},
	}

	AdmVulnerabilityAuditApplicationDependencyVulnerabilityResourceConfig = acctest.GenerateResourceFromRepresentationMap("oci_adm_knowledge_base", "test_knowledge_base", acctest.Required, acctest.Create, knowledgeBaseRepresentation) +
		acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Create, AdmVulnerabilityAuditRepresentation) + DefinedTagsDependencies
)

// issue-routing-tag: adm/default
func TestAdmVulnerabilityAuditApplicationDependencyVulnerabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmVulnerabilityAuditApplicationDependencyVulnerabilityResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	datasourceName := "data.oci_adm_vulnerability_audit_application_dependency_vulnerabilities.test_vulnerability_audit_application_dependency_vulnerabilities"
	singularDatasourceName := "data.oci_adm_vulnerability_audit_application_dependency_vulnerability.test_vulnerability_audit_application_dependency_vulnerability"

	acctest.SaveConfigContent("", "", "", t)

	acctest.ResourceTest(t, nil, []resource.TestStep{
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audit_application_dependency_vulnerabilities", "test_vulnerability_audit_application_dependency_vulnerabilities", acctest.Required, acctest.Create, AdmvulnerabilityAuditApplicationDependencyVulnerabilityDataSourceRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditApplicationDependencyVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(datasourceName, "application_dependency_vulnerability_collection.#"),
				resource.TestCheckResourceAttr(datasourceName, "application_dependency_vulnerability_collection.0.items.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "application_dependency_vulnerability_collection.0.items.0.gav", "com.google.guava:guava:29.0-jre"),
			),
		},
		// verify singular datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audit_application_dependency_vulnerability", "test_vulnerability_audit_application_dependency_vulnerability", acctest.Required, acctest.Create, AdmvulnerabilityAuditApplicationDependencyVulnerabilityDataSourceRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditApplicationDependencyVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(singularDatasourceName, "items.0.gav", "com.google.guava:guava:29.0-jre"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "items.0.vulnerabilities.#"),
				resource.TestCheckResourceAttr(singularDatasourceName, "items.#", "1"),
			),
		},
		// verify datasource with depth, rootNodeId and sortBy DFS
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audit_application_dependency_vulnerabilities", "test_vulnerability_audit_application_dependency_vulnerabilities", acctest.Required, acctest.Create, AdmvulnerabilityAuditApplicationDependencyVulnerabilityDataSourceRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditApplicationDependencyVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(datasourceName, "application_dependency_vulnerability_collection.#"),
				resource.TestCheckResourceAttr(datasourceName, "application_dependency_vulnerability_collection.0.items.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "application_dependency_vulnerability_collection.0.items.0.gav", "com.google.guava:guava:29.0-jre"),
			),
		},
		// verify singular datasource with depth, rootNodeId and sortBy DFS
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audit_application_dependency_vulnerability", "test_vulnerability_audit_application_dependency_vulnerability", acctest.Required, acctest.Create, AdmvulnerabilityAuditApplicationDependencyVulnerabilitySingularDataSourceWithDepthRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditApplicationDependencyVulnerabilityResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(singularDatasourceName, "items.0.gav", "com.google.guava:guava:29.0-jre"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "items.0.vulnerabilities.#"),
				resource.TestCheckResourceAttr(singularDatasourceName, "items.#", "1"),
			),
		},
	})
}
